package org.firstinspires.ftc.teamcode.docs;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.HardwareMap;

public class PracticeMotorSubsystem {

    /**
     * In short, this line of code declares a private, constant variable named `someMotor`
     * that will hold a reference to a DcMotor object.
     * <p>
     * This code declares a variable named `someMotor` with the following characteristics:
     * private: This is an access modifier that restricts the visibility of the variable.
     * Only code within the same class can access and modify someMotor.
     * This promotes encapsulation and information hiding, which are important principles in object-oriented programming.
     * final: This keyword indicates that the variable is a constant.
     * Once it's assigned a value, it cannot be changed.
     * This ensures that the `someMotor` variable will always refer to the same DcMotor object throughout the lifetime of the enclosing object.
     * DcMotor: This is the data type of the variable.
     * It indicates that someMotor will hold a reference to an object of the DcMotor class.
     * This class is part of a library that provides functionality for controlling DC motors.
     * someMotor: This is the name of the variable.
     * It's a descriptive identifier chosen by the programmer to represent the specific DC motor being controlled.
     * <p>
     * For demonstration purposes; This would be a TERRIBLE variable name!
     */

    private final DcMotor someMotor;
    private final DcMotor someOtherMotor;

    public PracticeMotorSubsystem(HardwareMap hardwareMap) {

        /**
         * Borrowing a drive motor for demonstration purposes.
         * Note that the string name, "leftBack" has to match the name in the Driver
         * Station & Control Hub setup
         */
        someMotor = hardwareMap.get(DcMotor.class,"leftBack");
        someOtherMotor = hardwareMap.get(DcMotor.class,"rightBack");

        // Brake or Coast mode
        //someMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // Set motor direction
        someMotor.setDirection(DcMotorEx.Direction.FORWARD);
        someMotor.setPower(0);
        someOtherMotor.setDirection(DcMotorEx.Direction.FORWARD);
        someOtherMotor.setPower(0);

    }

    /**
     * Turns the motor in one direction
     *
     * @param power The power to apply to the motor.
     *              The power can be any value between -1.0 and 1.0 and is generally set in the OpMode.
     */
    public void rotateMotor(double power) {
        someMotor.setPower(power);
        someOtherMotor.setPower(power);
    }

    /***
     * Turns the motor in the opposite direction as rotate motor method
     * @param power The power to apply to the motor.
     */
    public void rotateMotorReverse(double power) {

        someMotor.setPower(-power);
        someOtherMotor.setPower(-power);
    }

    /**
     * Stops the motor.
     */
    public void stopMotor() {
        someMotor.setPower(0);
        someOtherMotor.setPower(0);
    }

    /**
     * increment the motor with every button press,
     * increase the motor by 10 degrees per button press
     */

    public void incrementMotor(double rotSomeDegrees) {
        // someMotor.get (+rotSomeDegrees);
    }
}
