package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.acmerobotics.roadrunner.Pose2d;
import com.acmerobotics.roadrunner.PoseVelocity2d;
import com.acmerobotics.roadrunner.Vector2d;

@Disabled
@TeleOp(name = "TeleOp", group = "Drive")

public class MecanumTeleop extends LinearOpMode {
    private MecanumDrive drive;

    @Override
    public void runOpMode() throws InterruptedException {
        // Initialize the drive system
        drive = new MecanumDrive(hardwareMap, new Pose2d(0, 0, 0));

        waitForStart();

        while (opModeIsActive()) {
            // Get gamepad inputs
            double leftY = -gamepad1.left_stick_y; // Reversed to match the robot's forward direction
            double leftX = gamepad1.left_stick_x;
            double rightX = gamepad1.right_stick_x;

            // Apply deadzone to prevent drift
            leftY = Math.abs(leftY) > 0.1 ? leftY : 0;
            leftX = Math.abs(leftX) > 0.1 ? leftX : 0;
            rightX = Math.abs(rightX) > 0.1 ? rightX : 0;

            // Optional: Add fine control mode
            if (gamepad1.right_bumper) {
                leftY *= 0.5;
                leftX *= 0.5;
                rightX *= 0.5;
            }

            // Create velocity vector from gamepad inputs
            Vector2d vel = new Vector2d(
                    leftY, // Forward/backward
                    leftX  // Left/right
            );

            // Update the robot's velocity using the MecanumDrive class
            drive.setDrivePowers(new PoseVelocity2d(
                    vel,
                    rightX // Angular velocity (turning)
            ));

            // Update the robot's position estimate
            drive.updatePoseEstimate();

            // Add telemetry
            telemetry.addData("Robot Position", "X: %.2f, Y: %.2f, Heading: %.2fÂ°",
                    drive.pose.position.x,
                    drive.pose.position.y,
                    Math.toDegrees(drive.pose.heading.toDouble()));
            telemetry.addData("Left Stick", "Y: %.2f, X: %.2f", leftY, leftX);
            telemetry.addData("Right Stick", "X: %.2f", rightX);
            telemetry.update();
        }
    }
}